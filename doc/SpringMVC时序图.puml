@startuml
Client -> DispatcherServlet: 1.请求调用入口
DispatcherServlet --> DispatcherServlet: 2.doDispatch(),请求分发
DispatcherServlet -> HandlerExecutionChain: 3.getHandler(),根据请求获取HandlerExecutionChain
DispatcherServlet -> HandlerAdapter: 4.getHandlerAdapter(),获取HandlerAdapter
HandlerExecutionChain --> HandlerExecutionChain: 5.applyPreHandle(),如果配置了拦截器,执行拦截器的前置处理
HandlerAdapter -> AbstractHandlerMethodAdapter: 6.handle(),执行具体的handler方法
AbstractHandlerMethodAdapter --> AbstractHandlerMethodAdapter: 7.handleInternal(),调用钩子方法
AbstractHandlerMethodAdapter -> RequestMappingHandlerAdapter: 8.handleInternal(),具体方法
RequestMappingHandlerAdapter --> RequestMappingHandlerAdapter: 9.invokeHandlerMethod(),执行handler对应的方法,返回ModelAndView对象
RequestMappingHandlerAdapter -> ServletInvocableHandlerMethod: 10.invokeAndHandle(),执行实际的handler对应的方法,并将结果（视图）封装为ModelAndViewContainer类型
RequestMappingHandlerAdapter --> RequestMappingHandlerAdapter: 11.getModelAndView(),获取结果视图
RequestMappingHandlerAdapter -> AbstractHandlerMethodAdapter: 12.返回ModelAndView对象
AbstractHandlerMethodAdapter -> DispatcherServlet: 13.返回ModelAndView对象
HandlerExecutionChain --> HandlerExecutionChain: 14.applyPostHandle(),如果配置了拦截器,执行拦截器的后置处理
DispatcherServlet --> DispatcherServlet: 15.processDispatchResult(),处理返回的视图或异常
DispatcherServlet --> DispatcherServlet: 16.render(),解析ModelAndView对象为View对象
DispatcherServlet -> AbstractView: 17.render(),渲染视图，将mode数据转为response响应
AbstractView -> Client: 18.返回结果给client



@enduml